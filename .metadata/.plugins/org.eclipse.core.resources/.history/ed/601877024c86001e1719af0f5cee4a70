package com.dxc.controller;

import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.dxc.dao.UserRepo;
import com.dxc.exception.IncorrectPinException;
import com.dxc.exception.UserExistsException;
import com.dxc.exception.UserNotFoundException;
import com.dxc.model.User;
import com.dxc.model.UserCred;
import com.dxc.service.TransactionService;
import com.dxc.service.UserService;

@RestController
@RequestMapping
public class TransController {
	
	@GetMapping("/greet")
    public String welcome(){
        return "Transaction page is working";
    }
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
	private UserRepo userDao;
	
	@Autowired
	private TransactionService transactionService;
	ResponseEntity response;
	boolean flag;
	
	@GetMapping("/deposit/{accountNumber}/{amount}")
	public ResponseEntity<?> depositFun(@PathVariable String accountNumber,@PathVariable double amount){
		flag = transactionService.deposit(accountNumber, amount);
		if(flag) {
			response = new ResponseEntity<String>("amount is deposited in your account", HttpStatus.ACCEPTED);
		}
		else {
			response = new ResponseEntity<String>("Check the details ", HttpStatus.BAD_REQUEST);
		}
		return response;
	}
	
	@GetMapping("/withdraw/{accountNumber}/{amount}")
	public ResponseEntity<?> withdrawFun(@PathVariable String accountNumber,@PathVariable double amount){
		flag = transactionService.withdraw(accountNumber, amount);
		if(flag) {
			response = new ResponseEntity<String>("Withdraw successfull", HttpStatus.ACCEPTED);
		}
		else {
			response = new ResponseEntity<String>("Check the details ", HttpStatus.BAD_REQUEST);
		}
		return response;
	}
	
	@GetMapping("/payment/{accountNumber}/{amount}")
	public ResponseEntity<?> paymentFun(@PathVariable String accountNumber,@PathVariable double amount){
		flag = transactionService.transferAmount(accountNumber, amount);
		if(flag) {
			response = new ResponseEntity<String>("Payment successfull", HttpStatus.ACCEPTED);
		}
		else {
			response = new ResponseEntity<String>("Check the details ", HttpStatus.BAD_REQUEST);
		}
		return response;
	}
	
	@GetMapping("checkBalance/{accountNumber}")
	public ResponseEntity<?> chkBalFun(@PathVariable String accountNumber){
		
		double amount = transactionService.checkBalance(accountNumber);
		if(amount!=0) {
			response = new ResponseEntity<Double>(amount, HttpStatus.OK);
		}
		else {
			response = new ResponseEntity<String>("Check the details ", HttpStatus.BAD_REQUEST);
		}
		return response;	
	}
	
	@Autowired
	private UserService service;
	
	@PostMapping("/user/register")
	public User registerUser(@RequestBody User user) throws UserExistsException {
		return this.service.registerUser(user);
	}
	
	@PostMapping("/user/login")
	public User authenticateUser(@RequestBody UserCred credentails) throws UserNotFoundException, IncorrectPinException{
		final User user = this.service.authenticateUser(credentails.getUsername(), credentails.getAccno(),credentails.getLoginpin());
		return user;
	}
	
}
